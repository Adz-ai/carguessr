basePath: /
definitions:
  autotraderguesser_internal_models.ChallengeGuess:
    properties:
      actualPrice:
        type: number
      carId:
        type: string
      carIndex:
        type: integer
      difference:
        description: Calculated field
        type: number
      guessedPrice:
        type: number
      percentage:
        type: number
      points:
        type: integer
    type: object
  autotraderguesser_internal_models.ChallengeGuessRequest:
    properties:
      guessedPrice:
        maximum: 10000000
        minimum: 0
        type: number
    required:
    - guessedPrice
    type: object
  autotraderguesser_internal_models.ChallengeResponse:
    properties:
      actualPrice:
        type: number
      carId:
        type: string
      carIndex:
        type: integer
      difference:
        description: Calculated field
        type: number
      guessedPrice:
        type: number
      isLastCar:
        type: boolean
      message:
        type: string
      nextCarNumber:
        type: integer
      originalUrl:
        type: string
      percentage:
        type: number
      points:
        type: integer
      sessionComplete:
        type: boolean
      totalScore:
        type: integer
    type: object
  autotraderguesser_internal_models.ChallengeSession:
    properties:
      cars:
        items:
          $ref: '#/definitions/autotraderguesser_internal_models.EnhancedCar'
        type: array
      completedTime:
        type: string
      currentCar:
        type: integer
      difficulty:
        type: string
      guesses:
        items:
          $ref: '#/definitions/autotraderguesser_internal_models.ChallengeGuess'
        type: array
      isComplete:
        type: boolean
      sessionId:
        type: string
      startTime:
        type: string
      totalScore:
        type: integer
      userId:
        type: integer
    type: object
  autotraderguesser_internal_models.CreateFriendChallengeRequest:
    properties:
      difficulty:
        enum:
        - easy
        - hard
        type: string
      maxParticipants:
        maximum: 50
        minimum: 2
        type: integer
      title:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - difficulty
    - title
    type: object
  autotraderguesser_internal_models.EnhancedCar:
    properties:
      auctionDetails:
        description: Flag indicating this is auction data
        type: boolean
      bodyColour:
        type: string
      bodyType:
        type: string
      description:
        description: Combined description
        type: string
      doors:
        type: string
      emissionClass:
        type: string
      engine:
        type: string
      exteriorColor:
        description: More detailed color
        type: string
      fuelType:
        type: string
      fullTitle:
        description: Complete original title for Easy mode
        type: string
      gearbox:
        type: string
      id:
        description: Standard Car fields
        type: string
      images:
        items:
          type: string
        type: array
      interiorColor:
        description: Interior details
        type: string
      keyFacts:
        description: Auction key facts
        items:
          type: string
        type: array
      location:
        description: Vehicle location e.g. "Bournemouth, Dorset, United Kingdom"
        type: string
      make:
        type: string
      mileage:
        description: Standard overview fields
        type: integer
      mileageFormatted:
        description: Enhanced Bonhams fields
        type: string
      model:
        type: string
      originalUrl:
        type: string
      owners:
        type: string
      price:
        description: Will be 0 for guessing
        type: number
      registration:
        type: string
      saleDate:
        description: Sale date in format "29 Jul 2025"
        type: string
      seats:
        type: string
      steering:
        description: '"Right-hand drive"'
        type: string
      trim:
        description: Enhanced Lookers fields
        type: string
      year:
        type: integer
    type: object
  autotraderguesser_internal_models.GuessRequest:
    properties:
      difficulty:
        description: Default to hard for backward compatibility
        enum:
        - easy
        - hard
        type: string
      gameMode:
        enum:
        - zero
        - streak
        - challenge
        type: string
      guessedPrice:
        maximum: 10000000
        minimum: 0
        type: number
      listingId:
        type: string
    required:
    - gameMode
    - guessedPrice
    - listingId
    type: object
  autotraderguesser_internal_models.GuessResponse:
    properties:
      actualPrice:
        type: number
      correct:
        type: boolean
      difference:
        type: number
      gameOver:
        type: boolean
      guessedPrice:
        type: number
      message:
        type: string
      originalUrl:
        type: string
      percentage:
        type: number
      score:
        type: integer
    type: object
  autotraderguesser_internal_models.LeaderboardEntry:
    properties:
      date:
        description: Formatted date for JSON response
        type: string
      difficulty:
        description: '"easy" or "hard", defaults to "hard" for backward compatibility'
        type: string
      friendChallengeId:
        type: integer
      gameMode:
        type: string
      id:
        type: integer
      legacyId:
        description: For migration from JSON
        type: string
      name:
        maxLength: 20
        minLength: 1
        type: string
      score:
        type: integer
      sessionId:
        type: string
      userId:
        type: integer
    required:
    - name
    type: object
  autotraderguesser_internal_models.LeaderboardSubmissionRequest:
    properties:
      difficulty:
        description: Default to hard for backward compatibility
        enum:
        - easy
        - hard
        type: string
      gameMode:
        enum:
        - streak
        - challenge
        type: string
      name:
        maxLength: 20
        minLength: 1
        type: string
      score:
        minimum: 0
        type: integer
      sessionId:
        type: string
    required:
    - gameMode
    - name
    - score
    type: object
  autotraderguesser_internal_models.PasswordResetRequest:
    properties:
      displayName:
        type: string
      newPassword:
        minLength: 6
        type: string
      securityAnswer:
        type: string
      username:
        type: string
    required:
    - displayName
    - newPassword
    - securityAnswer
    - username
    type: object
  autotraderguesser_internal_models.User:
    properties:
      avatarUrl:
        type: string
      createdAt:
        type: string
      displayName:
        type: string
      favoriteDifficulty:
        type: string
      id:
        type: integer
      isGuest:
        type: boolean
      lastActive:
        type: string
      securityQuestion:
        type: string
      sessionToken:
        type: string
      totalGamesPlayed:
        type: integer
      username:
        type: string
    type: object
  internal_handlers.AuthResponse:
    properties:
      message:
        type: string
      sessionToken:
        type: string
      success:
        type: boolean
      user:
        $ref: '#/definitions/autotraderguesser_internal_models.User'
    type: object
  internal_handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  internal_handlers.RegisterRequest:
    properties:
      displayName:
        maxLength: 30
        minLength: 1
        type: string
      password:
        minLength: 6
        type: string
      securityAnswer:
        maxLength: 100
        minLength: 2
        type: string
      securityQuestion:
        maxLength: 200
        minLength: 5
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - displayName
    - password
    - securityAnswer
    - securityQuestion
    - username
    type: object
host: localhost:8080
info:
  contact:
    name: CarGuessr Support
    url: https://github.com/your-repo/carguessr/issues
  description: A fun car price guessing game with multiple game modes using real Bonhams
    Car Auction data. Now with enhanced security, rate limiting, and 250 cars with
    7-day refresh cycles.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://carguessr.uk
  title: CarGuessr API
  version: "2.1"
paths:
  /api/admin/cache-status:
    get:
      description: Returns information about the current cache status, age, and listing
        counts. Requires admin authentication.
      produces:
      - application/json
      responses:
        "200":
          description: cache status information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized - Admin key required'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminKey: []
      summary: Get cache status information (Admin Only)
      tags:
      - admin
  /api/admin/leaderboard-status:
    get:
      description: Returns information about the leaderboard file, entry counts, and
        storage details. Requires admin authentication.
      produces:
      - application/json
      responses:
        "200":
          description: leaderboard status information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized - Admin key required'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminKey: []
      summary: Get leaderboard status information (Admin Only)
      tags:
      - admin
  /api/admin/listings:
    get:
      description: Returns all car listings currently loaded in the system with full
        details including prices. This reveals all answers and is restricted to admin
        access.
      produces:
      - application/json
      responses:
        "200":
          description: count and cars array
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized - Admin key required'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminKey: []
      summary: Get all available car listings (Admin Only)
      tags:
      - admin
  /api/admin/refresh-listings:
    post:
      description: Triggers a non-blocking background refresh of car listings. Supports
        mode query param (bonhams/lookers/both). Requires admin authentication and
        has a 30-minute cooldown between requests. Game continues normally during
        refresh.
      parameters:
      - default: both
        description: Refresh mode (bonhams, lookers, both)
        enum:
        - bonhams
        - lookers
        - both
        in: query
        name: mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: refresh started, status: refreshing, note: game continues
            normally'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized - Admin key required'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited or refresh cooldown
            active'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminKey: []
      summary: Manually refresh car listings (Admin Only)
      tags:
      - admin
  /api/admin/test-scraper:
    get:
      description: Tests the Bonhams scraper and returns up to 10 cars with full details.
        This is an expensive operation. Requires admin authentication.
      produces:
      - application/json
      responses:
        "200":
          description: message, count, and cars array
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: Unauthorized - Admin key required'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: error and message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - AdminKey: []
      summary: Test the car scraper directly (Admin Only)
      tags:
      - admin
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with username and password. Returns a session
        token valid for 7 days. Automatically upgrades password hashes to current
        security standards.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      summary: Login to an existing account
      tags:
      - auth
  /api/auth/logout:
    post:
      description: Invalidates the current session token and clears the session cookie.
        Can be called without authentication.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      summary: Logout from current session
      tags:
      - auth
  /api/auth/profile:
    get:
      description: Returns the authenticated user's profile information including
        leaderboard statistics and rankings. Requires authentication via session token.
      produces:
      - application/json
      responses:
        "200":
          description: 'user: User object, leaderboardStats: rankings and stats'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Allows authenticated users to update their display name or avatar
        URL. Display names must be unique.
      parameters:
      - description: Profile update data
        in: body
        name: profile
        required: true
        schema:
          properties:
            avatarUrl:
              type: string
            displayName:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "401":
          description: Not authenticated
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "409":
          description: Display name already exists
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with username, password, display name,
        and security question for password recovery. Password is hashed with bcrypt.
      parameters:
      - description: Registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Account created successfully
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "400":
          description: Invalid request data or validation failed
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "409":
          description: Username or display name already exists
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "500":
          description: Failed to create user account
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      summary: Register a new user account
      tags:
      - auth
  /api/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets a user's password by verifying their username, display name,
        and security question answer. Includes timing attack protection.
      parameters:
      - description: Password reset data
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/autotraderguesser_internal_models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "401":
          description: Invalid credentials or security answer
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
        "500":
          description: Failed to update password
          schema:
            $ref: '#/definitions/internal_handlers.AuthResponse'
      summary: Reset user password
      tags:
      - auth
  /api/auth/security-question:
    post:
      consumes:
      - application/json
      description: Returns a user's security question after verifying their username
        and display name. Used for password reset flow.
      parameters:
      - description: Username and display name
        in: body
        name: request
        required: true
        schema:
          properties:
            displayName:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'success: true, securityQuestion: string'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get security question for password reset
      tags:
      - auth
  /api/challenge/{sessionId}:
    get:
      description: Returns the current state of a challenge session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.ChallengeSession'
        "404":
          description: 'error: Session not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get current challenge session
      tags:
      - challenge
  /api/challenge/{sessionId}/guess:
    post:
      consumes:
      - application/json
      description: Submit a price guess for the current car in challenge mode. Returns
        points based on accuracy (max 5000 points). Rate limited to 60 requests per
        minute per IP.
      parameters:
      - description: Challenge Session ID (16 alphanumeric characters)
        in: path
        name: sessionId
        required: true
        type: string
      - description: 'Price guess (max price: £10,000,000)'
        in: body
        name: guess
        required: true
        schema:
          $ref: '#/definitions/autotraderguesser_internal_models.ChallengeGuessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: points earned, totalScore, isLastCar, message, originalUrl
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.ChallengeResponse'
        "400":
          description: 'error: Invalid request, session complete, or price exceeds
            maximum'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Session not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Submit a guess for challenge mode
      tags:
      - challenge
  /api/challenge/start:
    post:
      description: Starts a new 10-car challenge session with GeoGuessr-style scoring.
        Supports difficulty query param (easy/hard). Rate limited to 60 requests per
        minute per IP.
      parameters:
      - description: Difficulty mode (easy for Lookers, hard for Bonhams)
        enum:
        - easy
        - hard
        in: query
        name: difficulty
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'sessionId, cars array (10 cars with prices hidden), currentCar:
            0, totalScore: 0'
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.ChallengeSession'
        "404":
          description: 'error: Not enough cars available for challenge mode'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Start a new Challenge Mode session
      tags:
      - challenge
  /api/check-guess:
    post:
      consumes:
      - application/json
      description: Submit a price guess and get feedback on accuracy, score, and game
        status. Rate limited to 60 requests per minute per IP.
      parameters:
      - description: 'Price guess data (max price: £10,000,000)'
        in: body
        name: guess
        required: true
        schema:
          $ref: '#/definitions/autotraderguesser_internal_models.GuessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.GuessResponse'
        "400":
          description: 'error: Invalid request or price exceeds maximum'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Listing not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Submit a price guess for a car
      tags:
      - game
  /api/data-source:
    get:
      description: Returns information about both data sources (Bonhams and Lookers)
        including listing counts
      produces:
      - application/json
      responses:
        "200":
          description: data sources info with Easy/Hard mode listings
          schema:
            additionalProperties: true
            type: object
      summary: Get current data source information
      tags:
      - debug
  /api/friends/challenges:
    post:
      consumes:
      - application/json
      description: Creates a new multiplayer challenge with a unique 6-character code.
        The challenge includes 10 pre-selected cars that all participants will guess.
        Requires authentication.
      parameters:
      - description: Challenge creation data
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/autotraderguesser_internal_models.CreateFriendChallengeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: success, message, challenge, challengeCode, sessionId, participantCount,
            shareMessage
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data or validation failed
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create challenge
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new friend challenge
      tags:
      - friends
  /api/friends/challenges/{code}:
    get:
      description: Returns challenge information including participants and their
        completion status. Public endpoint - no authentication required.
      parameters:
      - description: Challenge code (6 alphanumeric characters)
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success, challenge with participants
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid challenge code format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Challenge not found or expired
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get participants
          schema:
            additionalProperties: true
            type: object
      summary: Get friend challenge details
      tags:
      - friends
  /api/friends/challenges/{code}/join:
    post:
      description: Allows an authenticated user to join an existing challenge using
        the challenge code. Creates a new session with the same cars as the template.
      parameters:
      - description: Challenge code (6 alphanumeric characters)
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success, message, sessionId, challenge
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid code, already participating, challenge full, or expired
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Challenge not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to join challenge
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Join a friend challenge
      tags:
      - friends
  /api/friends/challenges/{code}/leaderboard:
    get:
      description: Returns ranked list of all participants with their scores and completion
        status. Public endpoint - no authentication required.
      parameters:
      - description: Challenge code (6 alphanumeric characters)
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success, challenge, participants (ranked), totalCount
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid challenge code format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Challenge not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get leaderboard
          schema:
            additionalProperties: true
            type: object
      summary: Get challenge leaderboard
      tags:
      - friends
  /api/friends/challenges/{code}/participation:
    get:
      description: Returns the authenticated user's participation details and session
        for a specific challenge. Requires authentication.
      parameters:
      - description: Challenge code (6 alphanumeric characters)
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success, challenge, participation, session
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid challenge code format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Challenge not found or not participating
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get session details
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user participation in challenge
      tags:
      - friends
  /api/friends/challenges/my-challenges:
    get:
      description: Returns all challenges the authenticated user has created or is
        participating in. Requires authentication.
      produces:
      - application/json
      responses:
        "200":
          description: success, created (array), participating (array)
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get challenges
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's challenges
      tags:
      - friends
  /api/leaderboard:
    get:
      description: Returns the leaderboard optionally filtered by game mode and difficulty,
        sorted by score (descending for challenge, ascending for streak)
      parameters:
      - description: Game mode filter (streak or challenge)
        in: query
        name: mode
        type: string
      - description: Difficulty filter (easy or hard)
        in: query
        name: difficulty
        type: string
      - description: 'Maximum number of entries to return (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/autotraderguesser_internal_models.LeaderboardEntry'
            type: array
      summary: Get the game leaderboard
      tags:
      - game
  /api/leaderboard/submit:
    post:
      consumes:
      - application/json
      description: Submit a score to the leaderboard for streak or challenge mode.
        Validates the score against the session data.
      parameters:
      - description: Score submission data
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/autotraderguesser_internal_models.LeaderboardSubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: success message and leaderboard position
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid request or score validation failed'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Submit a score to the leaderboard
      tags:
      - game
  /api/random-enhanced-listing:
    get:
      description: Returns a random car listing with full details, supports difficulty
        query param (easy/hard)
      parameters:
      - description: Difficulty mode (easy for Lookers, hard for Bonhams)
        enum:
        - easy
        - hard
        in: query
        name: difficulty
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.EnhancedCar'
        "404":
          description: 'error: No listings available'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a random car listing with all characteristics based on difficulty
      tags:
      - game
  /api/random-listing:
    get:
      description: Returns a random car listing with the price hidden (set to 0) for
        the guessing game. Rate limited to 60 requests per minute per IP.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/autotraderguesser_internal_models.EnhancedCar'
        "404":
          description: 'error: No listings available'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Too Many Requests - Rate limited'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a random car listing for the game
      tags:
      - game
schemes:
- http
- https
securityDefinitions:
  AdminKey:
    description: Admin API key required for administrative endpoints. Can also be
      passed as 'admin_key' query parameter.
    in: header
    name: X-Admin-Key
    type: apiKey
swagger: "2.0"
